#!/usr/bin/env bash

# exit on error
set -e

color() {
  # avoid and ignore tput errors
  set +e; tput -Txterm "${@}"; set -e
}

info() {
  color setf 6 # yellow
  echo "> ${*}"
  color sgr0
}

error() {
  color setf 4 # red
  echo "> ${*}"
  color sgr0
}

hook() {
  script="${1}"
  file="${script_dir}/${script}.sh"
  if [ -f "${file}" ]; then
    info "Running script hook '${script}'"
    # hack to 'try' -e on subroutines
    set +e; ( set -e; source "${file}" ); status="$?"; set -e
    if [ "${status}" -gt 0 ]; then
      error "Script hook '${script}' failed"
      return 1
    fi
  fi
}

# determine this script's location
this="$(which "${0}")"
whereami="$(cd "$( dirname "$(readlink "${this}" || echo "${this}")")"; pwd)"

cd "${whereami}"

deploy_dir="${whereami}/deploy"
script_dir="${deploy_dir}/scripts"
nd_file="${deploy_dir}/next_deploy"
source "${deploy_dir}/config"

if [ ! -f "${nd_file}" ]; then
  echo "a" > "${nd_file}"
  info "WARNING: ${nd_file} did not exist, first deploy?"
fi

next_deploy="$(cat "${nd_file}")"
if [ -z "${next_deploy}" ]; then
  info "WARNING: ${nd_file} was empty"
  next_deploy="a"
fi

# reset forever's list layout
forever columns reset > /dev/null

hook "begin"

start() {
  start_name="${1}"
  start_dir="${2}"
  host="${3}"
  port="${4}"
  hook "pre_start"

  info "Starting ${start_name}"
  env BIND="${host}" PORT="${port}" forever start --uid "${start_name}" -l "${log_file}" --workingDir "${start_dir}" --sourceDir "${start_dir}" -p "${start_dir}" -a --minUptime 9000 --killSignal SIGTERM "${start_script}" > /dev/null

  hook "post_start"
}

stop() {
  stop_name="${1}"
  hook "pre_stop"

  info "Shutting down ${stop_name} ..."
  if forever stop "${stop_name}" > /dev/null; then
    info "Stopped ${stop_name}."
  else
    info "Couldn't stop ${stop_name}. Maybe it was not running?"
  fi

  hook "post_stop"
}

restart() {
  current_char="a"
  port="${port_a}"
  if [ "${next_deploy}" = "a" ]; then
    current_char="b"
    port="${port_b}"
  fi

  current_app="${app}_${current_char}"
  app_dir="${whereami}/${current_app}"

  stop "${current_app}"
  start "${current_app}" "${app_dir}" "${host}" "${port}"
}

is_running() {
  forever list --no-color | fgrep -v "STOPPED" | fgrep -q "${1}"
}

substitute() {
  deploy_app="${app}_${next_deploy}"

  if is_running "${deploy_app}"; then
    error "Looks like ${deploy_app} is already running"
    error "Please fix manually"
    return 1
  fi

  stop_char="a"
  port="${port_b}"
  if [ "${next_deploy}" = "a" ]; then
    stop_char="b"
    port="${port_a}"
  fi

  stop_app="${app}_${stop_char}"
  app_dir="${whereami}/${deploy_app}"

  if [  "${action}" = "deploy" ]; then
    pushd "${app_dir}/" > /dev/null
    commit="origin/master"
    if [ -n "${1}" ]; then
      commit="${1}"
    fi

    hook "pre_checkout"

    info "starting deploy for ${deploy_app}"
    color setf 3
    git fetch --all
    info "git fetch completed"
    color setf 3
    git reset --hard "${commit}"
    info "git checkout completed"

    hook "pre_install"
    color setf 3
    set -o pipefail
    npm install --production 2>&1 | fgrep "" # disable colors
    set +o pipefail
    info "npm install completed"

    hook "post_install"

    popd > /dev/null
  fi
  start "${deploy_app}" "${app_dir}" "${host}" "${port}"

  if [ "${action}" = "deploy" ]; then
    cleanup() {
      echo
      kill "${tail_pid}"
      error "${action} aborted by user"
      stop "${deploy_app}"
      return 1
    }
    trap cleanup INT # run cleanup on ^C
    info "Showing log for 10 seconds"
    echo
    tail -n 0 -F "${app_dir}/${log_file}" &
    tail_pid="$!"
    sleep 10
    kill "${tail_pid}"
  fi

  if is_running "${deploy_app}"; then
    color setf 2; echo -e "\n> ${deploy_app} has been deployed on port ${port}.\n"; color sgr0
  else
    error "${deploy_app} is no longer running, ${action} failed"
    return 1
  fi

  # hack to 'try' -e on subroutines
  set +e; ( set -e; hook "running" ); status="$?"; set -e
  if [ "${status}" -gt 0 ]; then
    stop "${deploy_app}"
    return 1
  fi

  stop "${stop_app}"

  info "Updating 'current' symlink"
  if [ "$(uname)" = "Darwin" ]; then
    ln -hsvf "${deploy_app}" "current"
  else
    ln -nsvf "${deploy_app}" "current"
  fi

  info "Setting next_deploy to ${stop_app}"
  echo "${stop_char}" > "${nd_file}"
}

action="${1}"
set +e;
(
  # hack to 'try' -e on subroutines
  set -e
  case "${action}" in
  deploy)
    substitute "${2}";;
  rollback)
    substitute;;
  stop)
    stop "${2}";;
  restart)
    restart;;
  *)
    echo "Usage:"
    echo "  ${0} deploy [COMMIT]"
    echo "  ${0} rollback"
    echo "  ${0} stop <APP_NAME>"
    echo "  ${0} restart"
  esac
)
status="$?"
set -e

echo ""
if [ -n "${action}" ]; then
  if [ "${status}" -eq 0 ]; then
    color setf 2; echo -e "> Action ${action} completed."; color sgr0
  else
    error "Action ${action} failed."
  fi
  echo ""
fi

hook "end"